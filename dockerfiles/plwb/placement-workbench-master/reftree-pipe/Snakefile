include: "rules/common.smk"

# =================================================================================================
#     Default "All" Target Rule
# =================================================================================================

# Depending on the config, we either use the given alignment tools, or skip the alignment step
# and use the input sequence files from the sample table directly for tree inference.
# As we want to allow to use multiple alignment tools, we have to keep these tools as part
# of the file paths of all our result files... Hence, for skipping the alignment step, we also
# need a special case that acts as if it was an aligner, but is not. We call this "apriori"
# algiment in the result files.
aligner_list = ( "no_alignment" if config["settings"]["skip_alignment"] else config["settings"]["aligner"] )

# list of post-alignment trimming tools
trimmer_list = config["settings"]["trimmer"]

# list of autoref modes
autoref_list = ( "no_autoref" if config["settings"]["skip_autoref"] else config["settings"]["autoref"] )

# Next, some calculation to decide whether to do all of the rf distances
# if there is only one result tree for a given sample, for example, then we can't do an intra-sample rf distance

# calculate the number of calculated result trees within a sample
intrasample_trees = listlen(aligner_list) * listlen(trimmer_list) * listlen(autoref_list)
# and between samples
intersample_trees = listlen(sample_names)
# also doesn't make sense to do rf dist for a given tree search if there was only one starting tree
starting_trees    = ( config["params"]["parsimony-starting-trees"] + config["params"]["random-starting-trees"] )
trees_compatible  = config["data"]["trees_are_compatible"]

# The rule that is executed by default. It requests the final output files,
# which are then created by applying snakemake rules.
rule all:
    input:
        # Best ML tree and associated model
        expand(
            "{outdir}/result/{sample}/{autoref}/{aligner}/{trimmer}/raxml-ng/tree/best.newick",
            outdir=outdir,
            aligner=aligner_list,
            trimmer=trimmer_list,
            sample=sample_names,
            autoref=autoref_list
        ),
        expand(
            "{outdir}/result/{sample}/{autoref}/{aligner}/{trimmer}/raxml-ng/tree/best.model",
            outdir=outdir,
            aligner=aligner_list,
            trimmer=trimmer_list,
            sample=sample_names,
            autoref=autoref_list
        ),
        # also ensure that the symlink (copy for now) to the best result of each sample is created
        expand(
            "{outdir}/result/{sample}/best_result/raxml-ng/tree/best.newick",
            outdir=outdir,
            sample=sample_names
        ),
        # Best ML tree with support values
        expand(
            "{outdir}/result/{sample}/{autoref}/{aligner}/{trimmer}/raxml-ng/tree/bootstrap.newick",
            outdir=outdir,
            aligner=aligner_list,
            trimmer=trimmer_list,
            sample=sample_names,
            autoref=autoref_list
        ),

        # Consensus trees from best tree set
        expand(
            "{outdir}/result/{sample}/{autoref}/{aligner}/{trimmer}/raxml-ng/tree/consensusTreeMR.newick",
            outdir=outdir,
            aligner=aligner_list,
            trimmer=trimmer_list,
            sample=sample_names,
            autoref=autoref_list
        ),
        expand(
            "{outdir}/result/{sample}/{autoref}/{aligner}/{trimmer}/raxml-ng/tree/consensusTreeMRE.newick",
            outdir=outdir,
            aligner=aligner_list,
            trimmer=trimmer_list,
            sample=sample_names,
            autoref=autoref_list
        ),

        # iqtree stats summary
        # expand(
        #     "result/{sample}/{aligner}/{trimmer}/raxml-ng/post/significance.txt",
        #     aligner=aligner_list,
        #     sample=sample_names
        # ),

        # consensus trees based on plausible tree set
        expand(
            "{outdir}/result/{sample}/{autoref}/{aligner}/{trimmer}/raxml-ng/post/plausible.consensusTreeMR.newick",
            outdir=outdir,
            aligner=aligner_list,
            sample=sample_names,
            trimmer=trimmer_list,
            autoref=autoref_list
        ),
        expand(
            "{outdir}/result/{sample}/{autoref}/{aligner}/{trimmer}/raxml-ng/post/plausible.consensusTreeMRE.newick",
            outdir=outdir,
            aligner=aligner_list,
            sample=sample_names,
            trimmer=trimmer_list,
            autoref=autoref_list
        ),

        # Various RF-distance calculations
        expand(
            "{outdir}/result/{sample}/{autoref}/{aligner}/{trimmer}/raxml-ng/tree/rf_distances.txt",
            outdir=outdir,
            aligner=aligner_list,
            sample=sample_names,
            trimmer=trimmer_list,
            autoref=autoref_list
        ) if starting_trees > 1 else [],
        expand(
            "{outdir}/result/{sample}/intrasample_rf_distances.txt",
            outdir=outdir,
            sample=sample_names
        ) if intrasample_trees > 1 else [],
        expand(
            "{outdir}/result/intersample_rf_distances.txt",
            outdir=outdir
        ) if trees_compatible and (intersample_trees > 1) else [],
        expand(
            "{outdir}/result/intersample_plausible_MR_rfdist.txt",
            outdir=outdir
        ) if trees_compatible and (intersample_trees > 1) else [],
        expand(
            "{outdir}/result/intersample_plausible_MRE_rfdist.txt",
            outdir=outdir
        ) if trees_compatible and (intersample_trees > 1) else [],

# The main `all` rule is local. It does not do anything anyway,
# except requesting the other rules to run.
localrules: all

# =================================================================================================
#     Rule Modules
# =================================================================================================

include: "rules/download.smk"
include: "rules/autoref.smk"
include: "rules/align.smk"
include: "rules/postalignment.smk"
if use_auto_model:
    include: "rules/modeltest.smk"
include: "rules/treesearch.smk"
include: "rules/tree_plausibility.smk"
include: "rules/rf_distance.smk"
